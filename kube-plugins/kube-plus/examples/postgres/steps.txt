Postgres Operator
-----------------

In this example we will deploy a Postgres Operator to manage life-cycle actions on Postgres instances.
Note that the Postgres Custom Resource Spec defines various fields such as username, password,
database name, which the Operator works with to setup a Postgres instance.
It is possible to update the Operator such that password creation is embedded within it.
For example of Operator managing passwords, check the Moodle example.

Setup:
-------
- Download Minikube (v0.30.0), download Helm (v2.11.0)

Steps:
-------

1) minikube start --memory 4096

2) helm init

3) git clone https://github.com/cloud-ark/kubeplus.git

4) cd kubeplus

5) Wait till Tiller Pod is running
   - kubectl get pods -n kube-system

6) Once Tiller Pod is ready, deploy Kubeplus
   - kubectl apply -f deploy/

7) Wait till kubeplus is ready (3/3 Ready containers)
   - kubectl get pods

8) cd examples/postgres

9) Deploy Postgres Operator
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/postgres-crd-v2-chart-0.0.3.tgz?raw=true

10) Wait till Postgres Operator Pod is ready
     - kubectl get pods

11) Find information about Postgres Custom Kind registered by Postgres Operator
    - kubectl describe customresourcedefinition postgreses.postgrescontroller.kubeplus
    - kubectl get --raw "/apis/platform-as-code/v1/man?kind=Postgres"
    - kubectl get --raw "/apis/platform-as-code/v1/composition?kind=Postgres&instance=postgres1" | python -mjson.tool
    - kubectl get --raw "/apis/platform-as-code/v1/explain?kind=Postgres" | python -m json.tool
      --> You should see OpenAPI Spec for Postgres custom kind as output
    - kubectl get --raw "/apis/platform-as-code/v1/explain?kind=Postgres.PostgresSpec" | python -m json.tool

12) Deploy Postgres1 instance
    - kubectl create -f postgres1.yaml
    - kubectl get pods (Wait till Postgres Pod is ready)
    - Verify database created and initialized successfully
      - Install Postgres command-line tool (psql)
      - kubectl describe postgres postgres1
      - MINIKUBE_IP=`minikube ip` (if using Minikube)
      - psql -h $MINIKUBE_IP -p <port> -U <username> -d <db-name>
        - port: available from output of kubectl describe
        - username: defined in postgres1.yaml
        - db-name: defined in postgres1.yaml
        - password: when prompted, enter password specified in postgres1.yaml
    - Get composition tree of Postgres1
      - kubectl get --raw "/apis/platform-as-code/v1/composition?kind=Postgres&instance=postgres1" | python -mjson.tool

13) Test Life-cycle actions (execute and verify)
    - kubectl apply -f add-user.yaml
    - kubectl apply -f delete-user.yaml
    - kubectl apply -f modify-password.yaml
    - kubectl apply -f add-db.yaml
    - kubectl apply -f delete-db.yaml

14) Cleanup
    - kubectl delete -f postgres1.yaml
    - helm list
    - helm delete chart_name
    - Verify
      - kubectl get pods
        -> postgres instance pod and postgres-operator pod should be deleted


Troubleshooting
----------------

1) Get KubePlus logs
   - kubectl get pod <kubeplus-pod> -c operator-manager
   - kubectl get pod <kubeplus-pod> -c operator-deployer
   - kubectl get pod <kubeplus-pod> -c kube-discovery-apiserver

2) Check Helm Deployments
   - helm list
